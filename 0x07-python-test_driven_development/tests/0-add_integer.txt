Doctest to check the ``0-add_integer`` module
======================

Importing:
>>> add_integer = __import__("0-add_integer").add_integer

>>> add_integer(8, 3)
11

>>> add_integer(7, -4)
3

>>> add_integer(-1, 8)
7

>>> [add_integer(i, i ** 2) for i in range(6)]
[0, 2, 6, 12, 20, 30]

>>> add_integer(3.3, 1)
4

>>> add_integer(1, 9.8)
10

>>> add_integer(6.21, 3.3)
9

>>> add_integer(1, float('inf'))
Traceback (most recent call last):
...
OverflowError: cannot convert float infinity to integer

>>> add_integer(1, float('nan'))
Traceback (most recent call last):
...
ValueError: cannot convert float NaN to integer

>>> add_integer(999999999999999999999999999999, 1)
1000000000000000000000000000000

>>> add_integer(True, 1)
Traceback (most recent call last):
...
TypeError: a must be an integer

>>> add_integer([2], 4)
Traceback (most recent call last):
...
TypeError: a must be an integer

>>> add_integer((2,), {"key": "value"})
Traceback (most recent call last):
...
TypeError: a must be an integer

>>> add_integer(5, "1")
Traceback (most recent call last):
...
TypeError: b must be an integer

>>> add_integer(0, False)
Traceback (most recent call last):
...
TypeError: b must be an integer

>>> add_integer()
Traceback (most recent call last):
...
TypeError: add_integer() missing 2 required positional arguments: 'a' and 'b'

>>> add_integer(1)
Traceback (most recent call last):
...
TypeError: add_integer() missing 1 required positional argument: 'b'

>>> add_integer(1, 2, 3)
Traceback (most recent call last):
...
TypeError: add_integer() takes 2 positional arguments but 3 were given
